# -*- coding: utf-8 -*-
"""DIPassig4q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mmFL__aJ23sBpGdF5bzd-zaCsWlYKid2
"""

import numpy as np
import cv2
import numpy as np
import matplotlib.pyplot as plt

def psnr(image_original, image_restored):
    M = image_original.shape[0]
    N = image_original.shape[1]

    # compute psnr as 10log10(MAX^2/MSE)
    mse = np.sum(np.square(image_original - image_restored)) / (M * N) + 0.0000001
    max = 255**2
    psnr = 10 * np.log10(max/mse)

    return psnr

img = cv2.imread('D:/IIITD/SEMESTER-IX/DIP/Assig/Assign 4/P_SUHAIL_KHAN_2017201/noise_cam.jpg',0)
orig = cv2.imread('D:/IIITD/SEMESTER-IX/DIP/Assig/Assign 4/P_SUHAIL_KHAN_2017201/cameraman.tif',0)
print(orig.shape)
M = img.shape[0]
N = img.shape[1]
plt.figure(figsize=(15, 7))
plt.title("Noised image")
plt.imshow(img, cmap='gray')
plt.show()

box_filter1 = np.ones([11, 11])
box_filter = box_filter1/121

psf_M = box_filter.shape[0]
psf_N = box_filter.shape[1]

psf_padded = np.zeros([M, N])

psf_padded[0:psf_M, 0:psf_N] = box_filter

laplacian = np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]], dtype=int)

laplacian_padded = np.zeros([M, N])
laplacian_padded[0:3, 0:3] = laplacian

psf_dft = np.fft.fft2(psf_padded)

laplacian_dft = np.fft.fft2(laplacian_padded)

laplacian_dft_abs = np.square(np.abs(laplacian_dft))
psf_dft_abs = np.square(np.abs(psf_dft))

store_psnr = []
check = -1
for lam in [0, 0.25, 0.5, 0.75, 1]:
    temp1 = np.divide(psf_dft_abs, psf_dft_abs + lam * laplacian_dft_abs)
    newimg = np.zeros([M, N])
    newimg[0:256, 0:256] = img
    image_dft = np.fft.fft2(newimg)
    #temp2 = np.divide(image_dft, psf_dft)
    temp2 = image_dft
    temp = np.abs(np.fft.ifft2(np.multiply(temp1, temp2)).real)
    result = temp.astype(np.uint8)
    plt.figure(figsize=(15, 7))
    plt.title("Restored image", )
    plt.imshow(result, cmap='gray')
    plt.show()
    
    temp4 = psnr(orig, result)
    store_psnr.append(temp4)
    if(temp4 > check):
        check = temp4
        filtershow = np.copy(temp1)

print(max(store_psnr))
plt.figure(figsize=(15,7))
plt.imshow(filtershow, cmap='gray')
plt.title("Fourier domain cls filter")
plt.show()

padded = np.zeros([2*256, 2*256])

for i in range(256):
    for j in range(256):
        padded[i][j] = result[i][j]

plt.figure(figsize=(15,7))
plt.imshow(padded, cmap='gray', vmin=0, vmax=255)
plt.title("Input Padded Image")
plt.show()

dft = np.fft.fft2(padded)
s_dft = np.log( np.abs(dft) + 1 )

plt.figure(figsize=(15,7))
plt.imshow(s_dft, cmap='gray')
plt.title("Magnitude Spectrum of input padded image")
plt.show()

new_padded = np.zeros([256*2,256*2])

for i in range(256*2):
    for j in range(256*2):
        new_padded[i][j] = padded[i][j] * ((-1)**(i+j))

c_dft = np.fft.fft2(new_padded)
s_c_dft = np.log( np.abs(c_dft) + 1)

plt.figure(figsize=(15,7))
plt.imshow(s_c_dft, cmap='gray')
plt.title("Centered Magnitude Spectrum of input padded image")
plt.show()
