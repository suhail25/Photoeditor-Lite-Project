# -*- coding: utf-8 -*-
"""DIP_ASSIG3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nntTPUOWDbUR5aQtwV0-ef96mVGAljBu
"""

import numpy as np
from math import *
import matplotlib.pyplot as plt
import cv2
from scipy import signal

#Question 1---------------------------------------------------------------------------------

input_image=cv2.imread('cameraman.jpg', 0)
input_image.shape

plt.figure(figsize=(15,7))
plt.imshow(input_image, cmap='gray', vmin=0, vmax=255)
plt.title("Input image")
plt.show()

padded = np.zeros([2*256, 2*256])

for i in range(256):
    for j in range(256):
        padded[i][j] = input_image[i][j]

plt.figure(figsize=(15,7))
plt.imshow(padded, cmap='gray', vmin=0, vmax=255)
plt.title("Input Padded Image")
plt.show()

dft = np.fft.fft2(padded)
s_dft = np.log( np.abs(dft) + 1 )

plt.figure(figsize=(15,7))
plt.imshow(s_dft, cmap='gray')
plt.title("Magnitude Spectrum of input padded image")
plt.show()

new_padded = np.zeros([256*2,256*2])

for i in range(256*2):
    for j in range(256*2):
        new_padded[i][j] = padded[i][j] * ((-1)**(i+j))

c_dft = np.fft.fft2(new_padded)
s_c_dft = np.log( np.abs(c_dft) + 1)

plt.figure(figsize=(15,7))
plt.imshow(s_c_dft, cmap='gray')
plt.title("Centered Magnitude Spectrum of input padded image")
plt.show()

def Dfunc(k, l, N, M):
    calc = sqrt( pow(k - (N/2), 2) + pow(l - (M/2), 2) )
    return calc

def calc_filter(Do):
    H = np.zeros([256*2, 256*2])

    for i in range(256*2):
        for j in range(256*2):
            temp = pow(Dfunc(i, j, 256*2, 256*2) / Do , 4) + 1
            H[i][j] = (1 / temp)

    F = np.multiply(c_dft, H)
    F_idft = np.fft.ifft2(F).real

    output_image = np.zeros([256*2, 256*2])

    for i in range(256*2):
        for j in range(256*2):
            output_image[i][j] = F_idft[i][j] * ((-1)**(i+j))
    
    final = np.zeros([256,256])

    for i in range(256):
        for j in range(256):
            final[i][j] = output_image[i][j]

    plt.figure(figsize=(15,7))
    plt.subplot(1,3,1)
    plt.imshow(H, cmap='gray')
    plt.title("Centered Magnitude Spectrum of filter")

    plt.subplot(1,3,2)
    plt.imshow(output_image, cmap='gray')
    plt.title("Output Image")

    plt.subplot(1,3,3)
    plt.imshow(final, cmap='gray')
    plt.title("Cropped Output Image")
    plt.show()

#for different cut off frequencies, output image and filter
#As Do increases blurring decreases bec more enery can pass throuh the filter
for i in [10, 30, 60]:
    calc_filter(i)

#Question 3--------------------------------------------------------------------------------------

box_filter1 = np.ones([9, 9])
box_filter = box_filter1/81

#https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.convolve2d.html

blur_spatial = signal.convolve2d(input_image, box_filter)

#convolution in fourier domain

temp1 = np.zeros([256+9-1,256+9-1])
temp2 = np.zeros([256+9-1,256+9-1])

for i in range(256):
    for j in range(256):
        temp1[i][j] = input_image[i][j]

for i in range(9):
    for j in range(9):
        temp2[i][j] = box_filter[i][j]

temp3 = np.fft.fft2(temp1)
temp4 = np.fft.fft2(temp2)

temp5 = np.multiply(temp3, temp4)

f_blur = np.fft.ifft2(temp5).real

#cropping to the size of input image
f_blur_crop = np.zeros([256, 256])
blur_spatial_crop = np.zeros([256, 256])

for i in range(256):
    for j in range(256):
        f_blur_crop[i][j] = f_blur[i][j]
        blur_spatial_crop[i][j] = blur_spatial[i][j]

plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
plt.imshow(f_blur, cmap='gray')
plt.title("Blurred-Fourier output image")

plt.subplot(1,2,2)
plt.imshow(blur_spatial, cmap='gray', vmin=0, vmax=255)
plt.title("Blurred-Spatial output image")
plt.show()

plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
plt.imshow(f_blur_crop, cmap='gray')
plt.title("Blurred-Fourier cropped output image")

plt.subplot(1,2,2)
plt.imshow(blur_spatial_crop, cmap='gray', vmin=0, vmax=255)
plt.title("Blurred-Spatial cropped output image")
plt.show()

#Question 4----------------------------------------------------------------------------------------

noise_image = cv2.imread('noiseIm.jpg', 0)
denoise_image = cv2.imread('denoiseIm.jpg', 0)
denoise_image.shape

plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
plt.imshow(noise_image, cmap='gray', vmin=0, vmax=255)
plt.title("Input noise image")

plt.subplot(1,2,2)
plt.imshow(denoise_image, cmap='gray', vmin=0, vmax=255)
plt.title("For reference denoise image")
plt.show()

#DFT - Magnitude Spectrum and Centered MS of input noise image

dft1 = np.fft.fft2(noise_image)
s_dft1 = np.log( np.abs(dft1) + 1 )

new_padded1 = np.zeros([256,256])

for i in range(256):
    for j in range(256):
        new_padded1[i][j] = noise_image[i][j] * ((-1)**(i+j))

c_dft1 = np.fft.fft2(new_padded1)
s_c_dft1 = np.log( np.abs(c_dft1) + 1)

# plt.figure(figsize=(15,7))
# plt.subplot(1,2,1)
# plt.imshow(s_dft1, cmap='gray')
# plt.title("Magnitude Spectrum of input noise image")

# plt.subplot(1,2,2)
# plt.imshow(s_c_dft1, cmap='gray')
# plt.title("Centered Magnitude Spectrum of input noise image")
# plt.show()

dft2 = np.fft.fft2(denoise_image)
s_dft2 = np.log( np.abs(dft2) + 1 )

new_padded2 = np.zeros([256,256])

for i in range(256):
    for j in range(256):
        new_padded2[i][j] = denoise_image[i][j] * ((-1)**(i+j))

c_dft2 = np.fft.fft2(new_padded2)
s_c_dft2 = np.log( np.abs(c_dft2) + 1)

# plt.figure(figsize=(15,7))
# plt.subplot(1,2,1)
# plt.imshow(s_dft2, cmap='gray')
# plt.title("Magnitude Spectrum of reference denoise image")
# plt.subplot(1,2,2)
# plt.imshow(s_c_dft2, cmap='gray')
# plt.title("Centered Magnitude Spectrum of reference denoise image")
# plt.show()

cosfunc = np.zeros([256,256])
for i in range(256):
    for j in range(256):
        cosfunc[i][j] = cos((pi/4)*i + (pi/4)*j)

# fig=plt.figure(figsize=(15, 7))												
# fig.add_subplot(1,2,1)
# plt.imshow(noise_image, cmap='gray')
# plt.title("Input noise image")

# fig.add_subplot(1,2,2)
# plt.imshow(cosfunc, cmap='gray')
# plt.title("Corresponding sinusoidal noise cos((pi/4)*n + (pi/4)*m)")
# plt.show()

take5 = np.fft.fft2(cosfunc)
take6 = np.log( np.abs(take5) + 1)

#corrupted coordinates are (32,32) and (224,224)
fig=plt.figure(figsize=(15, 7))												
fig.add_subplot(1,2,1)
plt.imshow(s_dft1, cmap='gray')
plt.title("Magnitude spectrum input noise image")

fig.add_subplot(1,2,2)
plt.imshow(take6, cmap='gray')
plt.title("Magnitude spectrum of sinusoidal noise")
plt.show()

kk = np.ones([256,256])
color = (0,0)
kk2 = cv2.circle(kk, (96,96), 1, color, -1)
filter = cv2.circle(kk2, (160,160), 1, color, -1)

# matrix= np.fft.ifftshift(np.fft.ifft2(np.fft.fftshift(filter)))
# output = signal.convolve(noise_image, matrix, 'same')
# toshow = np.abs(output)

# # plt.figure(figsize=(15,7))
# # plt.imshow(toshow, cmap='gray')
# # plt.title("Convolution in Spatial domain")

temp33 = np.multiply(c_dft1, filter)
output = np.fft.ifft2(np.fft.ifftshift(temp33))
toshow2 = np.abs(output)

fig=plt.figure(figsize=(15, 7))
plt.subplot(1,3,1)
plt.imshow(s_c_dft1, cmap='gray')
plt.title("Centered Magnitude Spectrum of input noise image")

fig.add_subplot(1,3,2)
plt.title('Filter Spectrum')
plt.imshow(filter, 'gray')

fig.add_subplot(1,3,3)
plt.title('Denoise Spectrum')
out_spec = np.log(np.abs(temp33)+1)
plt.imshow(out_spec, 'gray')
plt.show()

plt.figure(figsize=(15,7))
plt.imshow(toshow2, cmap='gray')
plt.title("Denoised - Convolution in Fourier domain")
plt.show()

fig=plt.figure(figsize=(15, 7))												
fig.add_subplot(1,2,1)
plt.imshow(noise_image, cmap='gray')
plt.title("Input noise image")

fig.add_subplot(1,2,2)
plt.imshow(toshow2 - noise_image, cmap='gray')
plt.title("Corresponding sinusoidal noise cos((pi/4)*n + (pi/4)*m)")
plt.show()
